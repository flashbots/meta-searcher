#!/bin/sh
### BEGIN INIT INFO
# Provides:          lighthouse
# Required-Start:    $network $remote_fs
# Required-Stop:     $network $remote_fs
# Default-Start:     5
# Default-Stop:      0 1 6
# Short-Description: Lighthouse Beacon Node
# Description:       Start and stop the lighthouse daemon
### END INIT INFO

PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
DAEMON=/usr/bin/lighthouse
NAME=lighthouse
DESC="Lighthouse Beacon Node"
PIDFILE=/var/run/lighthouse.pid
PIDFILE_MONITOR=/var/run/lighthouse_monitor.pid
LOGFILE=/var/log/lighthouse.log
LOGFILE_MONITOR=/var/log/lighthouse_monitor.log
LIGHTHOUSE_DIR=/persistent/lighthouse
JWT_SECRET_FILE=/var/volatile/jwt.hex

monitor_and_restart() {
    while true; do
        if ! pgrep -f "$DAEMON" > /dev/null; then
            echo "$(date): $DESC crashed. Restarting in 10 seconds..." >> ${LOGFILE_MONITOR}
            sleep 10
            start_lighthouse
        fi
        sleep 5
    done
}

start_lighthouse() {
		start-stop-daemon -S --make-pidfile -p $PIDFILE -b -a /bin/sh -- -c "exec ${DAEMON} \
		bn \
		--network mainnet \
		--execution-endpoint http://localhost:8551 \
		--execution-jwt $JWT_SECRET_FILE \
        --checkpoint-sync-url https://mainnet.checkpoint.sigp.io \
		--disable-deposit-contract-sync \
		--datadir "$LIGHTHOUSE_DIR" \
        --disable-optimistic-finalized-sync \
		2>&1 | tee ${LOGFILE}"
}

start() {
    echo -n "Starting $DESC: "
    echo "Starting $DESC" > /var/volatile/system-api.fifo

    # Ensure the lighthouse log exists and has correct permissions
    touch $LOGFILE

    # Ensure the LIGHTHOUSE_DIR exists and only root can access it
    mkdir -p $LIGHTHOUSE_DIR && chmod -R 700 $LIGHTHOUSE_DIR

    # Remount /var/volatile with increased size
    mount -o remount,size=90% /var/volatile

    # Generate a random JWT secret and save it to the file
    if [ ! -f $JWT_SECRET_FILE ]; then
        openssl rand -hex 32 | tr -d "\n" | tee $JWT_SECRET_FILE > /dev/null
        chmod 644 $JWT_SECRET_FILE
    fi

    start_lighthouse
    echo "$NAME."

    # Start the monitor in the background
    monitor_and_restart &
    echo $! > $PIDFILE_MONITOR
}

stop() {
    echo "Stopping $NAME"
    echo "Stopping $NAME" > /var/volatile/system-api.fifo

    local services="lighthouse monitor"
    for service in $services; do
        local pidfile_var="PIDFILE"
        [ "$service" = "monitor" ] && pidfile_var="PIDFILE_MONITOR"

        local pidfile=$(eval echo \$$pidfile_var)

        echo "Stopping $service"
        if [ -f "$pidfile" ]; then
            local pid=$(cat "$pidfile")
            local pids="$pid $(pgrep -P $pid)"

            # Send SIGTERM to all processes
            kill -TERM $pids 2>/dev/null

            # Wait for processes to terminate
            for i in $(seq 1 5); do
                if ! kill -0 $pids 2>/dev/null; then
                    break
                fi
                sleep 1
            done

            # Send SIGKILL to any remaining processes
            kill -KILL $pids 2>/dev/null

            rm -f "$pidfile"
            echo "$service stopped"
        else
            echo "$pidfile not found, $service may not be running"
        fi
    done
}

case "$1" in
  start)
        start
        ;;
  stop)
        stop
        ;;
  restart|reload)
        stop
        start
        ;;
  *)
	N=/etc/init.d/$NAME
	echo "Usage: $N {start|stop|restart|reload}" >&2
	exit 1
	;;
esac
exit 0
